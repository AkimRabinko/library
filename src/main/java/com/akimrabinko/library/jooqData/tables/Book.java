/*
 * This file is generated by jOOQ.
 */
package com.akimrabinko.library.jooqData.tables;


import com.akimrabinko.library.jooqData.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Book extends TableImpl<Record> {

    private static final long serialVersionUID = -1863777939;

    public static final Book BOOK = new Book();

    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    public final TableField<Record, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    public final TableField<Record, String> ISBN = createField(DSL.name("isbn"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    public final TableField<Record, String[]> AUTHORS = createField(DSL.name("authors"), org.jooq.impl.SQLDataType.CLOB.getArrayDataType(), this, "");

    public final TableField<Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    public final TableField<Record, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    public final TableField<Record, Integer> PAGES_COUNT = createField(DSL.name("pages_count"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<Record, Integer> YEAR_PUBLISHED = createField(DSL.name("year_published"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    public final TableField<Record, String> PUBLISHING_HOUSE = createField(DSL.name("publishing_house"), org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    public final TableField<Record, String> SHORT_INFO = createField(DSL.name("short_info"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    public Book() {
        this(DSL.name("book"), null);
    }

    public Book(String alias) {
        this(DSL.name(alias), BOOK);
    }

    public Book(Name alias) {
        this(alias, BOOK);
    }

    private Book(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Book(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(Book.BOOK, "book_pkey", new TableField[] { Book.BOOK.ID }, true);
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(
              Internal.createUniqueKey(Book.BOOK, "book_pkey", new TableField[] { Book.BOOK.ID }, true)
        );
    }

    @Override
    public Book as(String alias) {
        return new Book(DSL.name(alias), this);
    }

    @Override
    public Book as(Name alias) {
        return new Book(alias, this);
    }

    @Override
    public Book rename(String name) {
        return new Book(DSL.name(name), null);
    }

    @Override
    public Book rename(Name name) {
        return new Book(name, null);
    }
}
